# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HJJlMFM8aavAYU4g5YwFFMCkzJsUn2OA

Question 1: Write a Python program that asks the user for their age. If the age is greater than or equal to 18, print "You are an adult." Otherwise, print "You are a minor."
"""

age = int(input("Enter your age: "))
if age >= 18:
    print("You are an adult.")
else:
    print("You are a minor.")

"""Question 2: Write a Python program to print the numbers from 1 to 10 using a for loop."""

for num in range(1, 11):
    print(num)

"""Question 3: Write a Python program to calculate the sum of all even numbers from 1 to 20 using a while loop."""

total = 0
num=1
while num <= 20:
    if num % 2 == 0 :
        total += num
    num+=1
print(f"Sum of even numbers from 1 to 20: {total}")

"""Question 4: Define a function called multiply that takes two parameters and returns their product."""

def multiply(x, y):
    return x * y

m = multiply(3,6)
print(m)

"""Question 5: Create a class called Person with a constructor method that initializes the name and age attributes. Then, create an instance of the Person class and print the person's name and age."""

class person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
person1 = person("amir" , 22)
print("name :",person1.name)
print("age :" ,person1.age)

"""Question 6: Create a subclass called Student that inherits from the Person class. Add an additional attribute called student_id to the Student class. Create an instance of the Student class and print the student's name, age, and student ID."""

class Student(Person):
    def __init__(self, name, age, student_id):
        super().__init__(name, age)
        self.student_id = student_id
student1 = Student("amir" , 22 , "9727013")
print("Name:", student1.name)
print("Age:", student1.age)
print("Student ID:", student1.student_id)

"""Question 7: Write a Python program that prompts the user to enter a number and then prints whether the number is prime or not. Create a function called is_prime that takes an integer as an argument and returns True if it's prime, and False otherwise."""

def is_prime(num):
    if num <= 1:
        return False
    for n in range(2, num):
        if num % n == 0:
            return False
    return True

num = int(input("Enter a number: "))
if is_prime(num):
    print(num, "is a prime number.")
else:
    print(num, "is not a prime number.")

"""Question 8: Write a Python program that calculates the factorial of a given number using a recursive function. Prompt the user for an integer input and print its factorial."""

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

n = int(input("Enter an integer: "))
print("The factorial of", n, "is", factorial(n))

"""Question 9: Create a class called Rectangle with attributes width and height. Add a method calculate_area that calculates and returns the area of the rectangle. Create an instance of the Rectangle class and print its area."""

class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def calculate_area(self):
        return self.width * self.height

rectangle = Rectangle(5, 8)
print("The area of the rectangle is:", rectangle.calculate_area())

"""Question 10: Create a subclass called Square that inherits from the Rectangle class. Add a method calculate_perimeter to the Square class that calculates and returns the perimeter of the square. Create an instance of the Square class and print its perimeter."""



"""Question 11: Create a base class called Animal with attributes name and species. Provide a constructor to initialize these attributes and a method called speak that prints a generic message like "The animal makes a sound."
"""

class Animal:
    def __init__(self, name, species):
        self.name = name
        self.species = species

    def speak(self):
        print("The animal makes a sound.")

animal = Animal("Lion", "Panthera leo")
animal.speak()

"""Question 12: Create a subclass called Dog that inherits from the Animal class. Add a constructor to initialize the name, species, and breed attributes specific to dogs. Override the speak method in the Dog class to print "Woof!"
"""

class Dog(Animal):
    def __init__(self, name, species, breed):
        super().__init__(name, species)
        self.breed = breed

    def speak(self):
        print("Woof!")
dog = Dog("Buddy", "Canis lupus familiaris", "Golden Retriever")
dog.speak()

"""Question 13: Create another subclass called Cat that inherits from the Animal class. Add a constructor to initialize the name, species, and color attributes specific to cats. Override the speak method in the Cat class to print "Meow!"
"""

class Cat(Animal):
    def __init__(self, name, species, color):
        super().__init__(name, species)
        self.color = color

    def speak(self):
        print("Meow!")
cat = Cat("Whiskers", "Felis catus", "Gray")
cat.speak()

"""Question 14: Create instances of both the Dog and Cat classes and call their speak methods to demonstrate polymorphism."""

dog = Dog("Buddy", "Canis lupus familiaris", "Golden Retriever")
cat = Cat("Whiskers", "Felis catus", "Gray")

dog.speak()
cat.speak()